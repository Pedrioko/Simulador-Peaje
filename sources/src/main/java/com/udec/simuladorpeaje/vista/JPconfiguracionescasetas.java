/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.udec.simuladorpeaje.vista;

import com.udec.simuladorpeaje.logica.Caseta;
import com.udec.simuladorpeaje.logica.Configuracion;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author Estudiante
 */
public class JPconfiguracionescasetas extends javax.swing.JPanel {

    /**
     * Creates new form JPconfiguracionescasetas
     */
    public JPconfiguracionescasetas() {
        initComponents();
        cargaCantidades();
        cargaTable(Integer.parseInt(JTmanuales.getText()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPcantidades = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JTmanuales = new javax.swing.JTextField();
        JTtelepeajes = new javax.swing.JTextField();
        JBmasamanuales = new javax.swing.JButton();
        JBmenosamanuales = new javax.swing.JButton();
        JBmastelepeajes = new javax.swing.JButton();
        JBmenostelepeajes = new javax.swing.JButton();
        JPpermite = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        JBactualizarservers = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuración de Casetas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        JPcantidades.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3), "Cantidades"));

        jLabel1.setText("Casetas Manuales");

        jLabel2.setText("Casetas Telepeajes");

        JTmanuales.setEditable(false);
        JTmanuales.setBackground(new java.awt.Color(255, 255, 255));
        JTmanuales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JTmanualesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTmanualesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTmanualesKeyTyped(evt);
            }
        });

        JTtelepeajes.setEditable(false);
        JTtelepeajes.setBackground(new java.awt.Color(255, 255, 255));
        JTtelepeajes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JTtelepeajesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTtelepeajesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTtelepeajesKeyTyped(evt);
            }
        });

        JBmasamanuales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add128.png"))); // NOI18N
        JBmasamanuales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBmasamanualesActionPerformed(evt);
            }
        });

        JBmenosamanuales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/minus63.png"))); // NOI18N
        JBmenosamanuales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBmenosamanualesActionPerformed(evt);
            }
        });

        JBmastelepeajes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add128.png"))); // NOI18N
        JBmastelepeajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBmastelepeajesActionPerformed(evt);
            }
        });

        JBmenostelepeajes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/minus63.png"))); // NOI18N
        JBmenostelepeajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBmenostelepeajesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPcantidadesLayout = new javax.swing.GroupLayout(JPcantidades);
        JPcantidades.setLayout(JPcantidadesLayout);
        JPcantidadesLayout.setHorizontalGroup(
            JPcantidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPcantidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addComponent(JTmanuales, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(JTtelepeajes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(JPcantidadesLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(JBmasamanuales)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JBmenosamanuales)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                .addComponent(JBmastelepeajes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JBmenostelepeajes)
                .addGap(214, 214, 214))
        );
        JPcantidadesLayout.setVerticalGroup(
            JPcantidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPcantidadesLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(JPcantidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(JTmanuales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(JTtelepeajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPcantidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBmasamanuales)
                    .addComponent(JBmenosamanuales)
                    .addComponent(JBmastelepeajes)
                    .addComponent(JBmenostelepeajes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JPpermite.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3), "Acepta"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Buses", null, null, null, null, null, null, null},
                {"Tracto Camión", null, null, null, null, null, null, null}
            },
            new String [] {
                "Tipo Especial|Servidores", "Caseta 1", "Caseta 2", "Caseta 3", "Caseta 4", "Caseta 5", "Caseta 6 (Telepeaje)", "Caseta 7 (Telepeaje)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout JPpermiteLayout = new javax.swing.GroupLayout(JPpermite);
        JPpermite.setLayout(JPpermiteLayout);
        JPpermiteLayout.setHorizontalGroup(
            JPpermiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPpermiteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        JPpermiteLayout.setVerticalGroup(
            JPpermiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPpermiteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addContainerGap())
        );

        JBactualizarservers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1408842495_refresh.png"))); // NOI18N
        JBactualizarservers.setText("Actualizar Casetas");
        JBactualizarservers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBactualizarserversActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPpermite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JPcantidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(JBactualizarservers)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(JPcantidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(JPpermite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(JBactualizarservers)
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JTmanualesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTmanualesKeyReleased

    }//GEN-LAST:event_JTmanualesKeyReleased

    private void JTmanualesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTmanualesKeyPressed

    }//GEN-LAST:event_JTmanualesKeyPressed

    private void JTmanualesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTmanualesKeyTyped

    }//GEN-LAST:event_JTmanualesKeyTyped

    private void JTtelepeajesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTtelepeajesKeyPressed

    }//GEN-LAST:event_JTtelepeajesKeyPressed

    private void JTtelepeajesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTtelepeajesKeyReleased

    }//GEN-LAST:event_JTtelepeajesKeyReleased

    private void JTtelepeajesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTtelepeajesKeyTyped

    }//GEN-LAST:event_JTtelepeajesKeyTyped

    private void JBmasamanualesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBmasamanualesActionPerformed
        Long l = Long.parseLong(JTmanuales.getText());
        l++;
        JTmanuales.setText(l.toString());
        verificaCantidadesManuales();
    }//GEN-LAST:event_JBmasamanualesActionPerformed

    private void JBmenosamanualesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBmenosamanualesActionPerformed
        Long l = Long.parseLong(JTmanuales.getText());
        l--;
        JTmanuales.setText(l.toString());
        verificaCantidadesManuales();
    }//GEN-LAST:event_JBmenosamanualesActionPerformed

    private void JBmastelepeajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBmastelepeajesActionPerformed
        Long l = Long.parseLong(JTtelepeajes.getText());
        l++;
        JTtelepeajes.setText(l.toString());
        verificaCantidadesTelepeaje();
    }//GEN-LAST:event_JBmastelepeajesActionPerformed

    private void JBmenostelepeajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBmenostelepeajesActionPerformed
        Long l = Long.parseLong(JTtelepeajes.getText());
        l--;
        JTtelepeajes.setText(l.toString());
        verificaCantidadesTelepeaje();
    }//GEN-LAST:event_JBmenostelepeajesActionPerformed

    private void JBactualizarserversActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBactualizarserversActionPerformed
        nuevaConfig();
       
    }//GEN-LAST:event_JBactualizarserversActionPerformed

    /**
     *
     */
    public void nuevaConfig() {
        Configuracion.getInstancia().setCasetas(Integer.valueOf(JTmanuales.getText()));
        Configuracion.getInstancia().setTelepeajes(Integer.parseInt(JTtelepeajes.getText()));
        ArrayList<Caseta> alcs = new ArrayList<>();
        ArrayList<Caseta> alts = new ArrayList<>();
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        int canBus = 0;
        int canTruck = 0;
        int manuales = Integer.parseInt(JTmanuales.getText());
        int telepeajes = Integer.parseInt(JTtelepeajes.getText());
        int row = 0;
        int column = 1;
        for (int i = 0; i < manuales; i++) {
            row = 0;
            Caseta c = new Caseta(manuales + 1);
            c.setTipo(1);
            c.setAceptaBuses((Boolean) tm.getValueAt(row, column));
            row++;
            c.setAceptaBorradores((Boolean) tm.getValueAt(row, column));
            column++;
            if (c.isAceptaBorradores() == null) {
                c.setAceptaBorradores(Boolean.FALSE);
            }
            if (c.isAceptaBuses() == null) {
                c.setAceptaBuses(Boolean.FALSE);
            }
            if (c.isAceptaBorradores()) {
                canTruck++;
            }
            if (c.isAceptaBuses()) {
                canBus++;
            }
            alcs.add(c);
        }
        int sizeteles = alcs.size();
        for (int i = 0; i < telepeajes; i++) {
            Caseta c = new Caseta(sizeteles);
            c.setTipo(0);
            c.setAceptaBorradores(Boolean.TRUE);
            c.setAceptaBuses(Boolean.TRUE);
            alts.add(c);
            sizeteles++;
        }
        if (manuales > 0) {
            if (canBus == 0) {
                JOptionPane.showMessageDialog(this, "Por lo menos una caseta debe Aceptar Buses", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                if (canTruck == 0) {
                    JOptionPane.showMessageDialog(this, "Por lo menos una caseta debe Aceptar Tracto-Camiones", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    Configuracion.getInstancia().casetasConfig(alcs, alts);
                    JOptionPane.showMessageDialog(this, "Actualización Exitosa", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            Configuracion.getInstancia().casetasConfig(alcs, alts);
            JOptionPane.showMessageDialog(this, "Actualización Exitosa", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        com.udec.simuladorpeaje.vista.Run.gen.actualizaDesdeCasetas();
    }

    /**
     *
     */
    public void nuevaConfigSneak() {
        Configuracion.getInstancia().setCasetas(Integer.valueOf(JTmanuales.getText()));
        Configuracion.getInstancia().setTelepeajes(Integer.parseInt(JTtelepeajes.getText()));
        ArrayList<Caseta> alcs = new ArrayList<>();
        ArrayList<Caseta> alts = new ArrayList<>();
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        int canBus = 0;
        int canTruck = 0;
        int manuales = Integer.parseInt(JTmanuales.getText());
        int telepeajes = Integer.parseInt(JTtelepeajes.getText());
        int row = 0;
        int column = 1;
        for (int i = 0; i < manuales; i++) {
            row = 0;
            Caseta c = new Caseta(manuales + 1);
            c.setTipo(1);
            c.setAceptaBuses((Boolean) tm.getValueAt(row, column));
            row++;
            c.setAceptaBorradores((Boolean) tm.getValueAt(row, column));
            column++;
            if (c.isAceptaBorradores() == null) {
                c.setAceptaBorradores(Boolean.FALSE);
            }
            if (c.isAceptaBuses() == null) {
                c.setAceptaBuses(Boolean.FALSE);
            }
            if (c.isAceptaBorradores()) {
                canTruck++;
            }
            if (c.isAceptaBuses()) {
                canBus++;
            }
            alcs.add(c);
        }
        int sizeteles = alcs.size();
        for (int i = 0; i < telepeajes; i++) {
            Caseta c = new Caseta(sizeteles);
            c.setTipo(0);
            c.setAceptaBorradores(Boolean.TRUE);
            c.setAceptaBuses(Boolean.TRUE);
            alts.add(c);
            sizeteles++;
        }
        if (manuales > 0) {
            if (canBus == 0) {
                JOptionPane.showMessageDialog(this, "Por lo menos una caseta debe Aceptar Buses", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                if (canTruck == 0) {
                    JOptionPane.showMessageDialog(this, "Por lo menos una caseta debe Aceptar Tracto-Camiones", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    Configuracion.getInstancia().casetasConfig(alcs, alts);

                }
            }
        } else {
            Configuracion.getInstancia().casetasConfig(alcs, alts);
        }

        com.udec.simuladorpeaje.vista.Run.gen.actualizaDesdeCasetas();
    }

    private void verificaCantidadesTelepeaje() {
        Long telepeajes = Long.parseLong(JTtelepeajes.getText());
        if (telepeajes < 0) {
            JTtelepeajes.setText("0");
        }
        if (sinCeros()) {
            Long manuales = Long.parseLong(JTmanuales.getText());
            manuales = Long.parseLong(JTmanuales.getText());
            cargaTable(Integer.parseInt(String.valueOf(manuales)));
            telepeajes = Long.parseLong(JTtelepeajes.getText());
            if (telepeajes <= 0) {
                JTtelepeajes.setText("0");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            }
            if (manuales >= 10) {
                JTmanuales.setText("10");
                JTtelepeajes.setText("0");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            }
            if (telepeajes >= 10) {
                JTmanuales.setText("0");
                JTtelepeajes.setText("10");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            } else {
                if (manuales + telepeajes > 10) {
                    for (;;) {
                        if (manuales + telepeajes > 10) {
                            manuales--;
                            cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            JTmanuales.setText(manuales.toString());
                            JTtelepeajes.setText(telepeajes.toString());
                            manuales = Long.parseLong(JTmanuales.getText());
                            cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            if (manuales + telepeajes > 10) {
                                telepeajes--;
                                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                                JTmanuales.setText(manuales.toString());
                                JTtelepeajes.setText(telepeajes.toString());
                                manuales = Long.parseLong(JTmanuales.getText());
                                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            } else {
                                manuales = Long.parseLong(JTmanuales.getText());
                                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                                break;
                            }
                        } else {
                            manuales = Long.parseLong(JTmanuales.getText());
                            cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            break;
                        }
                    }

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe haber una caseta por lo menos, se colocara una manual", "Error", JOptionPane.ERROR_MESSAGE);
            cargaTable(Integer.parseInt(JTmanuales.getText()));
        }
    }

    private Boolean sinCeros() {
        Integer manuales = Integer.parseInt(JTmanuales.getText());
        Integer telepeajes = Integer.parseInt(JTtelepeajes.getText());
        if (manuales == 0 && telepeajes == 0) {
            JTmanuales.setText("1");
            return false;
        }
        return true;
    }

    private void verificaCantidadesManuales() {
        Long manuales = Long.parseLong(JTmanuales.getText());
        if (manuales < 0) {
            JTmanuales.setText("0");
        }
        if (sinCeros()) {
            manuales = Long.parseLong(JTmanuales.getText());
            manuales = Long.parseLong(JTmanuales.getText());
            cargaTable(Integer.parseInt(String.valueOf(manuales)));
            Long telepeajes = Long.parseLong(JTtelepeajes.getText());
            if (manuales < 0) {

                JTmanuales.setText("0");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            }
            if (manuales >= 10) {
                JTmanuales.setText("10");
                JTtelepeajes.setText("0");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            } else {
                if (manuales + telepeajes > 10) {
                    for (;;) {
                        if (manuales + telepeajes > 10) {
                            telepeajes--;
                            JTmanuales.setText(manuales.toString());
                            JTtelepeajes.setText(telepeajes.toString());
                            manuales = Long.parseLong(JTmanuales.getText());
                            cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            if (manuales + telepeajes > 10) {
                                manuales--;
                                JTmanuales.setText(manuales.toString());
                                JTtelepeajes.setText(telepeajes.toString());
                                manuales = Long.parseLong(JTmanuales.getText());
                                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            } else {
                                manuales = Long.parseLong(JTmanuales.getText());
                                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                                break;
                            }
                        } else {
                            manuales = Long.parseLong(JTmanuales.getText());
                            cargaTable(Integer.parseInt(String.valueOf(manuales)));
                            break;
                        }
                    }

                }
            }
            if (telepeajes >= 10) {
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
                JTmanuales.setText("0");
                JTtelepeajes.setText("10");
                manuales = Long.parseLong(JTmanuales.getText());
                cargaTable(Integer.parseInt(String.valueOf(manuales)));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe haber una caseta por lo menos, se colocara una manual", "Error", JOptionPane.ERROR_MESSAGE);
            cargaTable(Integer.parseInt(JTmanuales.getText()));
        }

    }

    /**
     *
     */
    public void cargaCantidades() {
        JTmanuales.setText(String.valueOf(Configuracion.getInstancia().getCasetas()));
        JTtelepeajes.setText(String.valueOf(Configuracion.getInstancia().getTelepeajes()));
        cargaTable(Configuracion.getInstancia().getCasetas());
    }

    /**
     *
     * @param manuales
     */
    public void cargaTable(int manuales) {
        Class[] typex = new Class[manuales + 1];
        typex[0] = java.lang.String.class;
        for (int i = 1;
                i < typex.length;
                i++) {
            typex[i] = java.lang.Boolean.class;
        }

        String[] cabecera = new String[manuales + 1];
        cabecera[0] = "Tipo Aceptado|Servidores";
        for (int i = 1;
                i < cabecera.length;
                i++) {
            cabecera[i] = "Caseta " + i;
        }
        String[] columnauno = new String[]{"Buses", "Tracto Camión"};

        String[][] contenido = new String[2][cabecera.length];
        for (int i = 0;
                i < 2; i++) {
            contenido[i][0] = columnauno[i];

        }
        for (int i = 1;
                i < 2; i++) {
            for (int j = 1; j < cabecera.length; j++) {
                contenido[i][j] = null;
            }
        }
        DefaultTableModel table = new DefaultTableModel(contenido, cabecera
        ) {
            Class[] types = typex;

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 0) {
                    return false;
                }
                return true;

            }
        };

        jTable1.setModel(table);

        jTable1.repaint();
        colocaValores(Configuracion.getInstancia().getAlc());

    }

    /**
     *
     * @param alc
     */
    public void colocaValores(ArrayList<Caseta> alc) {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        int row = 0;
        int column = 1;
        for (Caseta c : alc) {
            if (c.getTipo() == 1) {
                try {
                    row = 0;
                    tm.setValueAt(c.isAceptaBuses(), row, column);
                    row++;
                    tm.setValueAt(c.isAceptaBorradores(), row, column);
                    column++;
                } catch (Exception e) {

                }

            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBactualizarservers;
    private javax.swing.JButton JBmasamanuales;
    private javax.swing.JButton JBmastelepeajes;
    private javax.swing.JButton JBmenosamanuales;
    private javax.swing.JButton JBmenostelepeajes;
    private javax.swing.JPanel JPcantidades;
    private javax.swing.JPanel JPpermite;
    private javax.swing.JTextField JTmanuales;
    private javax.swing.JTextField JTtelepeajes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
