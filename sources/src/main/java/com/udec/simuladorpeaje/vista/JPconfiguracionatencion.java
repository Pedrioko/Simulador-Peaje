/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.udec.simuladorpeaje.vista;

import com.udec.simuladorpeaje.logica.Caseta;
import com.udec.simuladorpeaje.logica.Configuracion;
import com.udec.simuladorpeaje.logica.Hora;
import com.udec.simuladorpeaje.logica.Servidor;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author Estudiante
 */
public class JPconfiguracionatencion extends javax.swing.JPanel {

    private DefaultTableModel tablefondo;
    private DefaultTableModel tablefrente;

    /**
     * Creates new form JPconfiguracioneshoraspico
     */
    public JPconfiguracionatencion() {
        initComponents();
        this.cargar(Configuracion.getInstancia().getAlc());
        this.actualizar();

    }

    private void carga() {
        ArrayList<Class> typesout = new ArrayList<>();
        typesout.add(java.lang.String.class);
        for (Caseta c : Configuracion.getInstancia().getAlc()) {
            if (c.getTipo() == 1) {
                typesout.add(java.lang.Boolean.class);
            }
        }
        Class[] typesZ = new Class[typesout.size()];
        for (int i = 0; i < typesZ.length; i++) {
            typesZ[i] = typesout.get(i);
        }
        String[] columnauno = new String[]{
            "0 - AM", "1 - AM", "2 - AM", "3 - AM", "4 - AM", "5 - AM", "6 - AM", "7 - AM", "8 - AM", "9 - AM", "10 - AM", "11 - AM",
            "12 - M", "1 - PM", "2 - PM", "3 - PM", "4 - PM", "5 - PM", "6 - PM", "7 - PM", "8 - PM", "9 - PM", "10 - PM", "11 - PM",};
        Object[][] contenido = new Object[24][typesout.size()];
        for (int i = 0; i < 24; i++) {
            contenido[i][0] = columnauno[i];
        }
        int size = typesout.size();
        for (int i = 0; i < 24; i++) {
            for (int j = 1; j < size; j++) {
                contenido[i][j] = null;
            }
        }
        String[] cabecera = new String[typesout.size()];
        cabecera[0] = "Hora|Servidor";
        int w = 1;
        for (int i = 0; i < Configuracion.getInstancia().getAlc().size(); i++) {
            if (Configuracion.getInstancia().getAlc().get(i).getTipo() == 1) {
                int numcaseta = i + 1;
                cabecera[w] = "Servidor 0 - Csta" + numcaseta;
                w++;
            }
        }
        tablefondo = new DefaultTableModel(contenido, cabecera
        ) {
            Class[] types = typesZ;

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 0) {
                    return false;
                }
                return true;
            }
        };
        this.jTable1.setModel(new DefaultTableModel());
        this.jTable1.setModel(tablefondo);
        cabecera = new String[typesout.size()];
        cabecera[0] = "Hora|Servidor";
        w = 1;
        for (int i = 0; i < Configuracion.getInstancia().getAlc().size(); i++) {
            if (Configuracion.getInstancia().getAlc().get(i).getTipo() == 1) {
                int numcaseta = i + 1;
                cabecera[w] = "Servidor 1 - Csta" + numcaseta;
                w++;
            }
        }
        tablefrente = new DefaultTableModel(contenido, cabecera
        ) {
            Class[] types = typesZ;

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        this.jTable2.setModel(new DefaultTableModel());
        this.jTable2.setModel(tablefrente);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuración de Atención de Servidores", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3), "Servidores del Fondo"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0 - AM", null, null, null, null, null, null, null},
                {"1 - AM", null, null, null, null, null, null, null},
                {"2 - AM", null, null, null, null, null, null, null},
                {"3 - AM",  new Boolean(false), null, null, null, null, null, null},
                {"4 - AM", null, null, null, null, null, null, null},
                {"5 - AM", null, null, null, null, null, null, null},
                {"6 - AM", null, null, null, null, null, null, null},
                {"7 - AM", null, null, null, null, null, null, null},
                {"8 - AM", null, null, null, null, null, null, null},
                {"9 - AM", null, null, null, null, null, null, null},
                {"10 - AM", null, null, null, null, null, null, null},
                {"11 - AM", null, null, null, null, null, null, null},
                {"12 - M", null, null, null, null, null, null, null},
                {"1 - PM", null, null, null, null, null, null, null},
                {"2 - PM", null, null, null, null, null, null, null},
                {"3 - PM", null, null, null, null, null, null, null},
                {"4 - PM", null, null, null, null, null, null, null},
                {"5 - PM", null, null, null, null, null, null, null},
                {"6 - PM", null, null, null, null, null, null, null},
                {"7 - PM", null, null, null, null, null, null, null},
                {"8 - PM", null, null, null, null, null, null, null},
                {"9 - PM", null, null, null, null, null, null, null},
                {"10 - PM", null, null, null, null, null, null, null},
                {"11 - PM", null, null, null, null, null, null, null}
            },
            new String [] {
                "Hora|Servidor", "Servidor 1", "Servidor 2", "Servidor 3", "Servidor 4", "Servidor 5", "Servidor 6", "Servidor 7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3), "Servidores del Frente"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0 - AM", null, null, null, null, null, null, null},
                {"1 - AM", null, null, null, null, null, null, null},
                {"2 - AM", null, null, null, null, null, null, null},
                {"3 - AM",  new Boolean(false), null, null, null, null, null, null},
                {"4 - AM", null, null, null, null, null, null, null},
                {"5 - AM", null, null, null, null, null, null, null},
                {"6 - AM", null, null, null, null, null, null, null},
                {"7 - AM", null, null, null, null, null, null, null},
                {"8 - AM", null, null, null, null, null, null, null},
                {"9 - AM", null, null, null, null, null, null, null},
                {"10 - AM", null, null, null, null, null, null, null},
                {"11 - AM", null, null, null, null, null, null, null},
                {"12 - M", null, null, null, null, null, null, null},
                {"1 - PM", null, null, null, null, null, null, null},
                {"2 - PM", null, null, null, null, null, null, null},
                {"3 - PM", null, null, null, null, null, null, null},
                {"4 - PM", null, null, null, null, null, null, null},
                {"5 - PM", null, null, null, null, null, null, null},
                {"6 - PM", null, null, null, null, null, null, null},
                {"7 - PM", null, null, null, null, null, null, null},
                {"8 - PM", null, null, null, null, null, null, null},
                {"9 - PM", null, null, null, null, null, null, null},
                {"10 - PM", null, null, null, null, null, null, null},
                {"11 - PM", null, null, null, null, null, null, null}
            },
            new String [] {
                "Hora|Servidor", "Servidor 1", "Servidor 2", "Servidor 3", "Servidor 4", "Servidor 5", "Servidor 6", "Servidor 7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1408842495_refresh.png"))); // NOI18N
        jButton1.setText("Actualizar Servidores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(4, 4, 4)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.actualizar();
        JOptionPane.showMessageDialog(null, "Actualización exitosa", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     *
     * @param alc
     */
    public void cargar(ArrayList<Caseta> alc) {
        carga();
        int w = 1;
        for (Caseta caseta : alc) {
            if (caseta.getTipo() == 1) {
                for (Servidor s : caseta.getServidores()) {
                    if (caseta.indexOfServidor(s) == 0) {
                        int x = 0;
                        for (Hora h : s.getHorario()) {
                            tablefondo.setValueAt(h.isAtiende(), x, w);
                            x++;
                            if (x == 24) {
                                x = 0;
                                break;
                            }
                        }
                    } else {
                        int x = 0;
                        for (Hora h : s.getHorario()) {
                            tablefrente.setValueAt(h.isAtiende(), x, w);
                            x++;
                            if (x == 24) {
                                x = 0;
                                break;

                            }
                        }
                    }
                }
                w++;
            }
        }
        this.jTable1.setModel(tablefondo);
        this.jTable2.setModel(tablefrente);
        this.jTable1.repaint();
        this.jTable2.repaint();

    }

    private void actualizar() {
        ArrayList<Caseta> alc = Configuracion.getInstancia().getAlc();
        int w = 1;
        for (Caseta caseta : alc) {
            if (caseta.getTipo() == 1) {
                for (Servidor s : caseta.getServidores()) {
                    if (caseta.indexOfServidor(s) == 0) {
                        ArrayList<Hora> hs = new ArrayList<>();
                        for (int i = 0; i < 24; i++) {
                            Hora h = new Hora((Boolean) tablefondo.getValueAt(i, w));
                            hs.add(h);
                        }
                        s.getHorario().removeAll(s.getHorario());
                        for (;;) {
                            if (s.getHorario().size() < 1440) {
                                s.addAllHorario(hs);
                            } else {
                                break;
                            }
                        }
                    } else {
                        ArrayList<Hora> hs = new ArrayList<>();
                        for (int i = 0; i < 24; i++) {
                            Hora h = new Hora((Boolean) tablefrente.getValueAt(i, w));
                            hs.add(h);
                        }
                        s.getHorario().removeAll(s.getHorario());
                        for (;;) {
                            if (s.getHorario().size() < 1440) {
                                s.addAllHorario(hs);
                            } else {
                                break;
                            }
                        }
                    }
                }
                w++;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
